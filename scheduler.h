/**
*******************************************************************************
* @file           : scheduler.h
* @brief          : Simple scheduler time-triggered for embedded systems
* @author         :	Gonzalo Rivera.
* @date           : 18/01/2023
*******************************************************************************
* @attention
*
* Copyright (c) <date> grivera. All rights reserved.
*
*/
#ifndef __SCHEDULER_H__
#define __SCHEDULER_H__
/******************************************************************************
        Includes
 ******************************************************************************/
#include <stdio.h>
#include <stdint.h>

/******************************************************************************
        Constants
 ******************************************************************************/
/**
 * @brief
 * this macro could be equal a macro in alarm definition header file generated by "system".
 *
 */
#ifndef MAX_TASKS
#define MAX_TASKS 5
#endif
/******************************************************************************
        Data types
 ******************************************************************************/
typedef enum
{
	SCHEDULER_OK = 0,
	SCHEDULER_FAIL = -1
}scheduler_ret_t;

/**
 * @brief
 * This enums define the status possibles of a task.
 *
 */
typedef enum
{
	READY = 0,
	STOPPED,
	RUNNING,
	SUSPENDED,
	RUN_ALWAYS

}task_status_t;

/**
 * @brief
 * Type pointer to function callback.
 * You should be use this to define a task function.
 *
 */
typedef void (*callback_task_t)(void *param);

/**
 * @brief
 * Struct to use as handler task into a task
 *
 */
typedef struct
{
	void *parameter;
	uint32_t index;

}task_handler_t;

/**
 * @brief
 * Struct to define a complete task
 *
 */
typedef struct
{
	callback_task_t ptask;
	const char* task_name;
	uint32_t delay;
	uint32_t period;
	task_status_t status;
	task_handler_t task_handler;

}task_t;

/******************************************************************************
        Public function prototypes
 ******************************************************************************/
#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief
 * Function to init scheduler time-triggered
 *
 * @param none
 *
 * @return 0 = ok, -1 = fail, 1 = other
 */
int scheduler_init(void);

/**
 * @brief
 * Function to start scheduler. Check if there are task added
 * and if result of "scheduler_init()" is OK. If all right set
 * the flag "SCH_RUN". See static function "scheduler_report_status()"
 *
 * @param none
 *
 * @return 0 = ok, -1 = fail, 1 = other
 */
int scheduler_start(void);

/**
 * @brief
 * Function to add a task in the array tasks of scheduler.
 *
 * @param task: pointer to function of your task.
 * See Data types section to know type of this.
 *
 * @param task_param: pointer void to share some parameter.
 * @param delay: this parameter add a delay before to run of task.
 * @param period: period of task.
 *
 * @return 0 = ok, -1 = fail, 1 = other
 */
int scheduler_add_task(callback_task_t task, const char *task_name, void *task_param, const uint32_t delay, const uint32_t period);

/**
 * @brief
 * Function to delete a task in the scheduler array tasks.
 *
 * @param index: index of task that will be delete.
 *
 * @return 0 = ok, -1 = fail, 1 = other
 */
int scheduler_delete_task(uint32_t index);

/**
 * @brief
 * Function to dispatch all task that status is READY of tasks array of scheduler.
 * This function should be run too fast possible, e.g: in your super loop.
 *
 * @param index: index of task that will be delete.
 *
 * @return none
 */
void scheduler_dispatch_task(void);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // EOF __SCHEDULER_H__
